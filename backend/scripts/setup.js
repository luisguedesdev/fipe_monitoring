const fs = require("fs");
const path = require("path");

console.log("üöÄ Configurando ambiente FIPE Monitoring...\n");

// Criar diret√≥rios necess√°rios
const dirs = ["data", "logs", "config"];

dirs.forEach((dir) => {
  const dirPath = path.join(__dirname, "..", dir);
  if (!fs.existsSync(dirPath)) {
    fs.mkdirSync(dirPath, { recursive: true });
    console.log(`‚úÖ Diret√≥rio criado: ${dir}`);
  } else {
    console.log(`üìÅ Diret√≥rio j√° existe: ${dir}`);
  }
});

// Copiar .env.example para .env se n√£o existir
const envExample = path.join(__dirname, "..", "..", ".env.example");
const envFile = path.join(__dirname, "..", "..", ".env");

if (!fs.existsSync(envFile) && fs.existsSync(envExample)) {
  fs.copyFileSync(envExample, envFile);
  console.log("‚úÖ Arquivo .env criado baseado no .env.example");
} else if (fs.existsSync(envFile)) {
  console.log("üìÑ Arquivo .env j√° existe");
} else {
  console.log("‚ö†Ô∏è  Arquivo .env.example n√£o encontrado");
}

// Verificar depend√™ncias cr√≠ticas
console.log("\nüîç Verificando depend√™ncias...");

const requiredDeps = [
  "express",
  "sqlite3",
  "axios",
  "winston",
  "helmet",
  "express-rate-limit",
];

const packageJson = require("../package.json");
const installedDeps = Object.keys(packageJson.dependencies || {});

const missingDeps = requiredDeps.filter((dep) => !installedDeps.includes(dep));

if (missingDeps.length > 0) {
  console.log("‚ùå Depend√™ncias faltando:", missingDeps.join(", "));
  console.log("Execute: npm install");
} else {
  console.log("‚úÖ Todas as depend√™ncias est√£o instaladas");
}

console.log("\nüéØ Configura√ß√£o completa!");
console.log("\nPr√≥ximos passos:");
console.log("1. Verifique/edite o arquivo .env conforme necess√°rio");
console.log("2. Execute: npm run dev (para desenvolvimento)");
console.log("3. Execute: npm start (para produ√ß√£o)");
console.log("4. Acesse: http://localhost:3000");

console.log("\nEndpoints dispon√≠veis:");
console.log("- GET  /health - Status da aplica√ß√£o");
console.log("- GET  /api/cache/stats - Estat√≠sticas do cache");
console.log("- POST /api/cache/clear - Limpar cache (dev only)");
console.log("- GET  /api/marcas - Listar marcas");
console.log("- GET  /api/modelos - Listar modelos");
console.log("- GET  /api/anos - Listar anos");
console.log("- GET  /api/historico - Obter hist√≥rico de pre√ßos");
console.log("- GET  /api/dashboard/:marca/:modelo - Dashboard de ve√≠culo");
console.log("- GET  /api/todos-registros - Todos os registros");
